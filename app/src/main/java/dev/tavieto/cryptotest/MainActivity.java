package dev.tavieto.cryptotest;

import android.os.Bundle;
import android.util.Log;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;

import java.security.PrivateKey;
import java.util.ArrayList;

public class MainActivity extends AppCompatActivity {

    private static final String TAG = "JoJo";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        TextView tv = findViewById(R.id.text);
        String text = "";
        try {
            int originalValue = 117;
            double messValue = FuncoesComplexas.funcaoComplexa1(originalValue);
            double originalValueAgain = FuncoesComplexas.funcaoComplexa2(messValue);

            Log.d(TAG, "onCreate - originalValue: " + originalValue);
            Log.d(TAG, "onCreate - messValue: " + messValue);
            Log.d(TAG, "onCreate - originalValueAgain: " + originalValueAgain);
            Log.d(TAG, "onCreate: isEqual = " + (originalValue == originalValueAgain));

            text = "success: " + testMIP();
        } catch (Throwable error) {
            text = "failure: " + error.getMessage();
        }
        tv.setText(text);
    }

    public static String testMIP() {
        try {
            RSACipher rsa = new RSACipher();
            String key = getPrivateKeyBase64();
            String encryptedMsg = getEncryptedMessage();
            PrivateKey privateKey = RSACipher.stringBase64ToPrivateKey(key);
            String decryptedMessage = rsa.decrypt(encryptedMsg, privateKey);

            Log.d(TAG, "testMIP: " + decryptedMessage);
            return decryptedMessage;
        } catch (Throwable e) {
            Log.d(TAG, "testMIP: " + e.getMessage());
        }
        return null;
    }

    public static String getPrivateKeyBase64() {
        String text = new String(getPrivateKeyBase64Bytes());
        return text;
    }

    public static byte[] getPrivateKeyBase64Bytes() {
        return new byte[] { 77, 73, 73, 69, 118, 65, 73, 66, 65, 68, 65, 78, 66, 103, 107, 113, 104, 107, 105, 71, 57, 119, 48, 66, 65, 81, 69, 70, 65, 65, 83, 67, 66, 75, 89, 119, 103, 103, 83, 105, 65, 103, 69, 65, 65, 111, 73, 66, 65, 81, 67, 86, 50, 117, 121, 70, 80, 86, 80, 83, 110, 122, 120, 80, 112, 80, 117, 100, 54, 109, 56, 122, 111, 69, 78, 87, 10, 66, 52, 87, 100, 108, 99, 101, 119, 86, 120, 53, 120, 76, 86, 117, 47, 71, 73, 112, 69, 56, 80, 115, 52, 85, 90, 103, 56, 113, 122, 56, 119, 67, 116, 47, 98, 107, 68, 105, 74, 103, 88, 68, 97, 82, 82, 65, 78, 98, 43, 73, 116, 80, 103, 79, 108, 66, 85, 50, 77, 69, 68, 57, 105, 68, 47, 85, 105, 66, 112, 53, 106, 110, 101, 110, 103, 10, 105, 121, 98, 79, 73, 98, 43, 48, 88, 89, 49, 106, 101, 119, 76, 78, 99, 53, 71, 110, 119, 120, 84, 49, 69, 48, 119, 121, 120, 78, 121, 77, 114, 72, 70, 68, 111, 71, 118, 79, 89, 104, 98, 79, 85, 56, 119, 105, 121, 55, 122, 47, 77, 120, 99, 47, 73, 79, 75, 57, 84, 109, 56, 80, 100, 112, 105, 80, 53, 87, 68, 116, 102, 86, 82, 56, 10, 97, 57, 50, 108, 67, 54, 49, 97, 67, 118, 48, 111, 113, 98, 110, 117, 75, 122, 100, 112, 47, 66, 86, 90, 77, 74, 43, 83, 50, 76, 67, 55, 65, 122, 119, 74, 101, 79, 48, 101, 86, 48, 109, 113, 114, 82, 90, 114, 75, 51, 75, 74, 115, 110, 70, 81, 72, 105, 50, 113, 54, 82, 82, 68, 77, 108, 81, 73, 102, 82, 87, 69, 69, 101, 84, 86, 10, 55, 88, 72, 51, 53, 99, 79, 110, 56, 84, 74, 56, 103, 50, 107, 99, 122, 79, 77, 48, 107, 75, 65, 43, 116, 47, 76, 78, 117, 97, 114, 48, 65, 120, 97, 111, 69, 88, 84, 103, 72, 105, 99, 48, 69, 103, 110, 97, 73, 82, 67, 55, 118, 97, 105, 68, 82, 102, 116, 110, 109, 49, 74, 82, 68, 69, 65, 115, 83, 57, 111, 88, 121, 68, 66, 54, 10, 113, 68, 76, 122, 98, 79, 82, 86, 108, 48, 66, 100, 65, 103, 77, 66, 65, 65, 69, 67, 103, 103, 69, 65, 66, 77, 121, 116, 78, 74, 116, 66, 79, 119, 97, 48, 108, 77, 120, 119, 55, 112, 55, 97, 106, 117, 109, 56, 72, 108, 53, 66, 84, 107, 110, 69, 121, 111, 89, 80, 121, 73, 111, 117, 88, 82, 70, 53, 74, 68, 111, 102, 111, 97, 56, 106, 10, 86, 66, 89, 99, 65, 80, 114, 111, 76, 111, 48, 81, 56, 110, 53, 57, 48, 99, 47, 83, 99, 115, 117, 53, 106, 55, 57, 106, 117, 72, 53, 82, 47, 73, 70, 115, 116, 107, 82, 83, 107, 112, 78, 112, 115, 85, 69, 87, 103, 52, 87, 82, 97, 90, 113, 49, 72, 66, 54, 43, 55, 52, 101, 54, 69, 69, 66, 54, 85, 115, 103, 120, 118, 75, 79, 119, 10, 108, 104, 79, 117, 67, 75, 100, 104, 80, 85, 119, 47, 66, 54, 52, 109, 107, 116, 99, 109, 79, 53, 115, 81, 52, 52, 43, 77, 87, 65, 53, 67, 108, 78, 79, 86, 82, 81, 97, 69, 88, 108, 57, 113, 122, 88, 101, 86, 88, 53, 110, 121, 109, 83, 50, 117, 118, 72, 111, 75, 103, 54, 52, 107, 102, 99, 85, 67, 98, 108, 77, 81, 79, 117, 77, 101, 10, 103, 53, 98, 116, 110, 115, 73, 118, 98, 49, 121, 48, 117, 84, 56, 80, 65, 109, 81, 82, 76, 79, 77, 65, 115, 105, 120, 113, 101, 102, 90, 55, 111, 57, 73, 111, 75, 88, 80, 105, 120, 54, 98, 47, 100, 76, 107, 112, 98, 50, 77, 67, 114, 53, 122, 110, 108, 105, 72, 87, 73, 82, 55, 67, 114, 72, 105, 112, 67, 105, 109, 115, 112, 100, 52, 117, 10, 81, 48, 81, 111, 57, 122, 109, 76, 53, 122, 50, 80, 66, 74, 122, 55, 116, 57, 117, 53, 66, 87, 99, 102, 98, 82, 68, 111, 82, 89, 106, 115, 53, 47, 102, 111, 104, 70, 55, 66, 78, 67, 53, 100, 102, 48, 101, 51, 57, 56, 120, 70, 108, 100, 105, 85, 122, 106, 52, 76, 65, 81, 75, 66, 103, 81, 68, 73, 118, 55, 90, 86, 49, 118, 110, 54, 10, 100, 107, 84, 113, 107, 121, 97, 118, 56, 71, 80, 82, 88, 117, 97, 72, 105, 110, 109, 121, 111, 81, 48, 43, 120, 70, 120, 65, 68, 77, 100, 99, 69, 115, 109, 109, 72, 118, 104, 106, 83, 52, 65, 72, 54, 76, 121, 49, 71, 68, 68, 83, 48, 79, 118, 97, 88, 107, 47, 68, 108, 100, 99, 89, 115, 88, 108, 90, 111, 82, 76, 70, 65, 52, 108, 105, 10, 74, 111, 88, 120, 99, 120, 117, 53, 118, 102, 65, 110, 75, 99, 118, 90, 51, 87, 114, 71, 113, 115, 118, 120, 56, 78, 117, 90, 90, 97, 116, 72, 43, 101, 117, 88, 71, 98, 103, 114, 70, 72, 87, 66, 72, 55, 111, 97, 84, 108, 67, 116, 109, 47, 103, 71, 51, 77, 122, 74, 75, 81, 78, 72, 121, 109, 76, 52, 72, 56, 122, 107, 54, 113, 106, 118, 10, 66, 43, 83, 52, 87, 52, 78, 122, 119, 81, 75, 66, 103, 81, 67, 47, 71, 86, 122, 73, 49, 111, 54, 71, 79, 48, 51, 110, 57, 77, 98, 111, 52, 78, 52, 89, 51, 104, 52, 65, 70, 88, 113, 68, 75, 116, 122, 86, 114, 114, 106, 74, 81, 52, 112, 70, 43, 116, 66, 119, 49, 105, 120, 47, 103, 74, 87, 104, 117, 87, 113, 70, 114, 49, 80, 115, 10, 47, 113, 99, 88, 110, 49, 67, 66, 89, 49, 71, 119, 117, 88, 99, 52, 77, 50, 113, 116, 72, 66, 47, 65, 57, 67, 56, 67, 47, 75, 51, 115, 102, 104, 73, 65, 106, 73, 79, 51, 53, 65, 121, 47, 112, 57, 75, 101, 103, 90, 90, 121, 116, 113, 90, 49, 76, 51, 54, 65, 99, 57, 82, 83, 73, 71, 108, 84, 68, 74, 90, 116, 85, 88, 83, 102, 10, 89, 75, 73, 116, 103, 119, 89, 88, 99, 47, 119, 89, 71, 99, 75, 103, 74, 117, 107, 50, 52, 48, 83, 56, 120, 86, 90, 85, 50, 120, 52, 68, 110, 81, 75, 66, 103, 69, 90, 100, 122, 77, 47, 120, 57, 116, 87, 119, 78, 120, 47, 121, 84, 74, 70, 72, 78, 102, 88, 104, 121, 102, 83, 103, 117, 86, 43, 47, 122, 67, 68, 65, 79, 52, 88, 72, 10, 57, 79, 108, 49, 80, 72, 71, 97, 85, 88, 54, 99, 114, 70, 103, 90, 89, 71, 119, 112, 43, 112, 77, 113, 52, 69, 69, 43, 53, 98, 54, 115, 43, 121, 83, 81, 115, 80, 83, 86, 51, 84, 112, 112, 114, 118, 74, 85, 104, 111, 98, 72, 122, 109, 81, 104, 67, 57, 106, 117, 99, 97, 73, 65, 86, 114, 107, 107, 106, 84, 66, 86, 79, 79, 82, 103, 10, 71, 116, 87, 122, 54, 76, 121, 105, 75, 48, 103, 79, 100, 57, 71, 51, 67, 85, 106, 72, 81, 115, 104, 88, 55, 50, 121, 89, 89, 76, 47, 121, 80, 70, 65, 104, 120, 79, 99, 115, 88, 109, 109, 118, 82, 49, 47, 104, 54, 71, 52, 109, 120, 99, 69, 66, 65, 111, 71, 65, 75, 49, 68, 78, 90, 106, 121, 122, 54, 53, 115, 118, 113, 110, 56, 105, 10, 81, 120, 69, 78, 90, 113, 101, 97, 78, 122, 121, 110, 71, 50, 111, 119, 121, 107, 75, 106, 89, 103, 78, 115, 75, 84, 97, 84, 51, 113, 43, 57, 81, 70, 49, 101, 68, 86, 49, 103, 49, 116, 75, 74, 47, 72, 77, 119, 88, 114, 116, 101, 51, 83, 85, 116, 70, 66, 106, 70, 47, 68, 103, 122, 87, 117, 47, 65, 66, 116, 87, 83, 102, 109, 80, 86, 10, 55, 73, 65, 98, 66, 111, 76, 84, 76, 72, 67, 70, 114, 122, 43, 85, 68, 120, 101, 105, 105, 88, 102, 55, 80, 82, 54, 53, 49, 116, 88, 113, 98, 51, 56, 110, 81, 73, 114, 101, 52, 103, 75, 80, 111, 55, 121, 99, 112, 105, 74, 72, 49, 68, 77, 88, 70, 107, 78, 111, 105, 84, 75, 111, 116, 67, 100, 74, 111, 108, 119, 56, 109, 70, 108, 101, 10, 99, 85, 85, 67, 103, 89, 66, 110, 105, 115, 68, 86, 89, 52, 106, 83, 56, 52, 83, 69, 53, 51, 50, 108, 53, 90, 104, 97, 55, 101, 76, 120, 67, 115, 116, 71, 72, 50, 99, 51, 120, 122, 43, 53, 77, 119, 109, 81, 115, 105, 70, 117, 107, 47, 111, 83, 73, 48, 49, 48, 75, 47, 50, 70, 122, 67, 80, 83, 76, 83, 113, 88, 106, 70, 81, 97, 10, 53, 111, 89, 57, 113, 106, 108, 106, 65, 87, 112, 71, 100, 51, 54, 117, 118, 116, 76, 102, 89, 103, 50, 113, 84, 108, 85, 110, 116, 111, 53, 54, 69, 85, 48, 103, 89, 79, 47, 80, 47, 68, 75, 84, 48, 65, 81, 65, 86, 74, 108, 53, 112, 71, 76, 67, 122, 50, 56, 86, 100, 54, 69, 72, 57, 109, 69, 118, 50, 98, 119, 79, 48, 88, 97, 88, 10, 52, 119, 87, 120, 117, 120, 72, 48, 118, 55, 80, 74, 105, 80, 74, 109, 50, 108, 102, 105, 56, 122, 106, 107, 110, 65, 61, 61 };
//        return intToByte(intBytes);
    }

    public static byte[] intToByte(int[] messBytes) {
        byte[] bytes = new byte[messBytes.length];
        for (int i = 0; i < messBytes.length; i++) {
            int y = ((messBytes[i] + 1) / y());
            if (y % 7 == 0) {
                bytes[i] = (byte) y;
            } else {
                bytes[i] = (byte) messBytes[i];
            }
        }
        return bytes;
    }

    public static int y() {
        double a = 3344.7854;
        double ab = 23;
        double cf = 67.0;

        return (int) (-0.4959352943725559 - (Math.sin(Math.PI / 532) * (Math.pow(a, 0.5456) + ab / cf) - Math.floor(1.8565) + Math.abs(-5) / Math.log10(100) + Math.min(2, 9) * Math.pow(2, 2)) - 6.492422314037935 + 20.98484462807587);
    }

    public static int messInt(int x) {
        return ((((((x + 2) * 3 - 7) / 2) + 5) * 4) / 2 - 10) + ((x * 2 - 8) / 3);
    }

    private static double unmessInt(double x) {
        // Inversão da expressão original
        return ((x - ((2 * 8) / 3) + 5) * 2 - 10) / (1.0 / 2.0 - 1);
    }

    public static String getEncryptedMessage() {
        String text = new String(getEncryptedMessageBytes());
        return text;
    }
    public static byte[] getEncryptedMessageBytes() {
        return new byte[]{ 73, 121, 112, 75, 43, 84, 48, 120, 83, 102, 78, 52, 50, 106, 56, 107, 112, 52, 77, 110, 54, 103, 65, 80, 84, 105, 50, 70, 55, 106, 65, 55, 99, 55, 114, 83, 49, 67, 48, 98, 107, 113, 88, 115, 108, 70, 79, 67, 111, 98, 48, 47, 88, 102, 98, 48, 110, 66, 116, 78, 68, 70, 84, 70, 73, 90, 117, 104, 57, 73, 49, 121, 90, 79, 72, 114, 10, 67, 105, 102, 97, 100, 89, 104, 85, 88, 53, 51, 115, 102, 56, 107, 65, 84, 69, 57, 57, 111, 106, 86, 78, 108, 90, 103, 89, 48, 56, 89, 72, 109, 55, 67, 111, 89, 57, 53, 122, 88, 47, 122, 106, 88, 65, 104, 85, 70, 56, 82, 67, 47, 105, 99, 48, 53, 57, 50, 82, 102, 57, 51, 102, 83, 87, 72, 104, 88, 110, 112, 81, 120, 120, 106, 72, 10, 48, 81, 50, 67, 112, 100, 69, 49, 85, 87, 78, 98, 89, 56, 80, 101, 101, 104, 111, 71, 69, 51, 73, 66, 98, 53, 114, 113, 111, 67, 100, 90, 101, 83, 121, 122, 65, 51, 81, 118, 55, 121, 51, 112, 78, 50, 97, 113, 114, 87, 116, 82, 53, 116, 103, 72, 76, 114, 81, 87, 109, 68, 81, 120, 97, 78, 119, 103, 121, 85, 101, 53, 100, 71, 57, 110, 10, 47, 105, 111, 104, 102, 73, 99, 118, 107, 81, 74, 106, 81, 100, 70, 66, 103, 107, 90, 111, 71, 51, 73, 115, 106, 56, 66, 90, 105, 50, 112, 107, 81, 115, 50, 72, 49, 87, 121, 74, 85, 114, 101, 73, 103, 52, 66, 106, 116, 86, 97, 71, 73, 78, 101, 103, 108, 115, 80, 116, 81, 80, 111, 49, 72, 69, 75, 98, 82, 69, 113, 82, 54, 106, 97, 55, 10, 65, 90, 80, 51, 43, 117, 78, 66, 109, 75, 68, 51, 54, 74, 48, 80, 67, 53, 56, 50, 88, 110, 104, 114, 70, 50, 105, 43, 106, 50, 116, 51, 115, 85, 83, 89, 68, 65, 61, 61 };
    }
}